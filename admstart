#!/usr/bin/env bash
#Author: Alex Gabriel <alex.gabriel@microfocus.com>
#Created: 04-Feb-2020
#Modified: 17-May-2020
#Description: Short shell script that allows users to start the most common ADM solutions when preparing for a demo.
#License: GPL 3.0

echo ""
echo "This is a short shell script that lets you start the most common ADM containers from the admpresales Docker repository. If the containers do not exist, they will be pulled first, and then started.  If you have suggestions for improvement, please contact me by emailing alex.gabriel@microfocus.com"
echo ""

if docker login; then
	 sleep 1
	else
		docker login
	fi

source functions

options[0]="Autopass"
options[1]="ALM"
options[2]="ALM Octane"
options[3]="AOS"
options[4]="AOS-QA"
options[5]="DA"
options[6]="DevOps"
options[7]="Fortify"
options[8]="IntelliJ"
options[9]="JIRA"
options[10]="LeanFT Chrome"
options[11]="MF Connect"
options[12]="PPM"
options[13]="RPA"
options[14]="Sonarqube"
options[15]="SV"
options[16]="UFT Mobile"
options[17]="All"

#Actions to take based on selection
function ACTIONS {
	 if [[ ${choices[0]} ]]; then
	 	 start autopass ${AutopassVersion}
	 fi
	 if [[ ${choices[1]} ]]; then
	 	 start alm ${ALMVersion}
	 fi
	 if [[ ${choices[2]} ]]; then
	 	 start octane ${ALMOctaneVersion}
	 fi
	 if [[ ${choices[3]} ]]; then
	 	 start aos ${AOSVersion}
	 fi
	 if [[ ${choices[4]} ]]; then
	 	 start aos-qa ${AOSQAVersion}
	 fi
	 if [[ ${choices[5]} ]]; then
	 	 start da ${DAVersion}
	 fi
	 if [[ ${choices[6]} ]]; then
	 	 start devops ${DevOpsVersion}
	 fi
	 if [[ ${choices[7]} ]]; then
	 	 start sca ${SCAVersion}
	 	 start ssc ${SSCVersion}
	 fi
	 if [[ ${choices[8]} ]]; then
	 	 start intellij ${IntelliJVersion}
	 fi
	 if [[ ${choices[9]} ]]; then
	 	 start jira ${JIRAVersion}
	 fi
	 if [[ ${choices[10]} ]]; then
	 	 start leanft-chrome ${LFTChromeVersion}
	 fi
	 if [[ ${choices[11]} ]]; then
	 	 start mfconnect ${MFConnectVersion}
	 fi
	 if [[ ${choices[12]} ]]; then
	 	 start ppm ${PPMVersion}
	 fi
	 if [[ ${choices[13]} ]]; then
	 	 start rpa ${RPAVersion}
	 fi
	 if [[ ${choices[14]} ]]; then
	 	 start sonarqube ${SonarqubeVersion}
	 fi
	 if [[ ${choices[15]} ]]; then
	 	 start sv ${SVVersion}
	 fi
	 if [[ ${choices[16]} ]]; then
	 	 start uft-mobile ${UFTMVersion}
	 fi
	 if [[ ${choices[17]} ]]; then
	 	 start autopass ${AutopassVersion}
	 	 start alm ${ALMVersion}
	 	 start octane ${ALMOctaneVersion}
	 	 start aos ${AOSVersion}
	 	 start aos-qa ${AOSQAVersion}
	 	 start da ${DAVersion}
	 	 start devops ${DevOpsVersion}
	 	 start sca ${SCAVersion}
	 	 start ssc ${SSCVersion}
	 	 start intellij ${IntelliJVersion}
	 	 start jira ${JIRAVersion}
	 	 start leanft-chrome ${LFTChromeVersion}
	 	 start mfconnect ${MFConnectVersion}
	 	 start ppm ${PPMVersion}
	 	 start rpa ${RPAVersion}
	 	 start sonarqube ${SonarqubeVersion}
	 	 start sv ${SVVersion}
	 	 start uft-mobile ${UFTMVersion}
	 fi
}

#Variables
ERROR=" "

#Clear screen for menu
#clear

#Menu function
function MENU {

	 for NUM in "${!options[@]}"; do
	 	 echo "[""${choices[NUM]:- }""]" $(( NUM+1 ))") ${options[NUM]}"
	 done
	 echo "$ERROR"
}

#Menu loop
while MENU && read -e -r -p "Select the desired container using its number (enter the same number to uncheck). Press enter after items 1-9, and press enter when all containers have been selected to start them: " -n2 SELECTION && [[ -n "$SELECTION" ]]; do
	 clear
	 if [[ "$SELECTION" == *[[:digit:]]* && $SELECTION -ge 1 && $SELECTION -le ${#options[@]} ]]; then
	 	 (( SELECTION-- ))
	 	 if [[ "${choices[SELECTION]}" == "+" ]]; then
	 	 	 choices[SELECTION]=""
	 	 else
	 	 	 choices[SELECTION]="+"
	 	 fi
	 	 	 ERROR=" "
	 else
	 	 ERROR="Invalid option: $SELECTION"
	 fi
done

ACTIONS