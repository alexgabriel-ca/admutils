#!/bin/bash
#Author: Alex Gabriel <alex.gabriel@microfocus.com>
#Created: 04-Feb-2020
#Modified: 24-Apr-2020
#Description: Short shell script that allows users to start the most common ADM solutions when preparing for a demo.
#License: GPL 3.0

ALMOctaneVersion="15.0.46.68"
ALMVersion="15.0.1"
AOSQAVersion="2.3"
AOSVersion="2.3"
AutopassVersion="10.9.2"
DAVersion="6.3.1"
DevOpsVersion="2.3.0"
IntelliJVersion="2.3.0"
JIRAVersion="8.0.2"
LFTChromeVersion="15.0"
MFConnectVersion="4.2"
PPMVersion="9.55"
RPAVersion="2019.11"
SCAVersion="19.2.3"
SSCVersion="19.2.0"
SVVersion="5.3"
SonarqubeVersion="7.7"
UFTMVersion="3.4"

#All start functions check for the existence of the relevant container.
#If the container is not found, the nimbusapp up command is issued.
#If the container is found, the nimbusapp start command is issued.

function startALM() {
	if docker ps | grep -q alm:${ALMVersion}; then
		echo "     ALM:${ALMVersion} already running"
		return
	elif ! docker container ls -a | grep -q alm:${ALMVersion}; then
		nimbusapp alm:${ALMVersion} up
		echo "     ALM:${ALMVersion} started"
	else
		nimbusapp alm:${ALMVersion} start
		echo "     ALM:${ALMVersion} started"
	fi
}

function startALMOctane() {
	if docker ps | grep -q octane:${ALMOctaneVersion}; then
		echo "     ALM Octane:${ALMOctaneVersion} already running"
		return
	elif ! docker container ls -a | grep -q octane:${ALMOctaneVersion}; then
		nimbusapp octane:${ALMOctaneVersion} up
		echo "     ALM Octane:${ALMOctaneVersion} started"
	else
		nimbusapp octane:${ALMOctaneVersion} start
		echo "     ALM Octane:${ALMOctaneVersion} started"
	fi
}

function startAOS() {
	if docker ps | grep -q aos-main-app:${AOSVersion}; then
		echo "     AOS:${AOSVersion} already running"
		return
	elif ! docker container ls -a | grep -q aos; then
		nimbusapp aos:${AOSVersion} up
		echo "     AOS:${AOSVersion} started"
	else
		nimbusapp aos:${AOSVersion} start
		echo "     AOS:${AOSVersion} started"
	fi
}

function startAOSQA() {
	if docker ps | grep -q aos-main-qa:${AOSQAVersion}; then
		echo "     AOS-QA already running"
		return
	elif ! docker container ls -a | grep -q aos-main-qa:${AOSQAVersion}; then
		nimbusapp aos-qa:${AOSQAVersion} up
		echo "     AOS-QA:${AOSQAVersion} started"
	else
		nimbusapp aos-qa:${AOSQAVersion} start
		echo "     AOS-QA:${AOSQAVersion} started"
	fi
}

function startAutopass() {
	if docker ps | grep -q autopass:${AutopassVersion}; then
		echo "     Autopass:${AutopassVersion} already running"
		return
	elif ! docker container ls -a | grep -q autopass:${AutopassVersion}; then
		nimbusapp autopass:${AutopassVersion} up
		echo "     Autopass:${AutopassVersion} started"
	else
		nimbusapp autopass:${AutopassVersion} start
		echo "     Autopass:${AutopassVersion} started"
	fi
}

function startDA() {
	if docker ps | grep -q da-server:${DAVersion}; then
		echo "     Deployment Automation:${DAVersion} already running"
		return
	elif ! docker container ls -a | grep -q da-server:${DAVersion}; then
		nimbusapp da:${DAVersion} up
		echo "     Deployment Automation:${DAVersion} started"
	else
		nimbusapp da:${DAVersion} start
		echo "     Deployment Automation:${DAVersion} started"
	fi
}

function startDevOps() {
	if docker ps | grep -q devops:${DevOpsVersion}; then
		echo "     DevOps:${DevOpsVersion} already running"
		return
	elif ! docker container ls -a | grep -q devops; then
		nimbusapp devops:${DevOpsVersion} up
		echo "     DevOps:${DevOpsVersion} started"
	else
		nimbusapp devops:${DevOpsVersion} start
		echo "     DevOps:${DevOpsVersion} started"
	fi
}

function startFortify() {
	if docker ps | grep -q sca:${SCAVersion} || docker ps | grep -q ssc:${SSCVersion}; then
		echo "     Fortify:${SCAVersion} already running"
		return
	fi

	if ! docker container ls -a | grep -q sca:${SCAVersion}; then
		nimbusapp sca:${SCAVersion} up
		echo "     SCA:${SCAVersion} started"
	else
		nimbusapp sca:${SCAVersion} start
		echo "     SCA:${SCAVersion} started"
	fi

	if ! docker container ls -a | grep -q ssc:${SSCVersion}; then
		nimbusapp ssc:${SSCVersion} up
		echo "     SSC:${SSCVersion} started"
	else
		nimbusapp ssc:${SSCVersion} start
		echo "     SSC:${SSCVersion} started"
	fi
}

function startIntelliJ() {
	if docker ps | grep -q intellij:${IntelliJVersion}; then
		echo "     IntelliJ:${IntelliJVersion} already running"
		return
	elif ! docker container ls -a | grep -q intellij:${IntelliJVersion}; then
		nimbusapp intellij:${IntelliJVersion} up
		echo "     IntelliJ:${IntelliJVersion} started"
	else
		nimbusapp intellij:${IntelliJVersion} start
		echo "     IntelliJ:${IntelliJVersion} started"
	fi
}

function startJIRA() {
	if docker ps | grep -q jira:${JIRAVersion}; then
		echo "     JIRA:${JIRAVersion} already running"
		return
	elif ! docker container ls -a | grep -q jira:${JIRAVersion}; then
		nimbusapp jira:${JIRAVersion} up
		echo "     JIRA:${JIRAVersion} started"
	else
		nimbusapp jira:${JIRAVersion} start
		echo "     JIRA:${JIRAVersion} started"
	fi
}

function startLFTChrome() {
	if docker ps | grep -q leanft-chrome:${LFTChromeVersion}; then
		echo "     LeanFT-Chrome:${LFTChromeVersion} already running"
		return
	elif ! docker container ls -a | grep -q leanft-chrome:${LFTChromeVersion}; then
		nimbusapp leanft-chrome:${LFTChromeVersion} up
		echo "     LeanFT-Chrome:${LFTChromeVersion} started"
	else
		nimbusapp leanft-chrome:${LFTChromeVersion} start
		echo "     LeanFT-Chrome:${LFTChromeVersion} started"
	fi
}

function startMFConnect() {
	if docker ps | grep -q mfconnect:${MFConnectVersion}; then
		echo "     MF Connect:${MFConnectVersion} already running"
		return
	elif ! docker container ls -a | grep -q mfconnect:${MFConnectVersion}; then
		nimbusapp mfconnect:${MFConnectVersion} up
		echo "     MF Connect:${MFConnectVersion} started"
	else
		nimbusapp mfconnect:${MFConnectVersion} start
		echo "     MF Connect:${MFConnectVersion} started"
	fi
}

function startPPM() {
	if docker ps | grep -q ppm:${PPMVersion}; then
		echo "     Project and Portfolio Management:${PPMVersion} already running"
		return
	elif ! docker container ls -a | grep -q ppm:${PPMVersion}; then
		nimbusapp ppm:${PPMVersion} up
		echo "     Project and Portfolio Management:${PPMVersion} started"
	else
		nimbusapp ppm:${PPMVersion} start
		echo "     Project and Portfolio Management:${PPMVersion} started"
	fi
}

function startRPA() {
	if docker ps | grep -q rpa:${RPAVersion}; then
		echo "     Robotic Process Automation:${RPAVersion} already running"
		return
	elif ! docker container ls -a | grep -q rpa:${RPAVersion}; then
		nimbusapp rpa:${RPAVersion} up
		echo "     Robotic Process Automation:${RPAVersion} started"
	else
		nimbusapp rpa:${RPAVersion} start
		echo "     Robotic Process Automation:${RPAVersion} started"
	fi
}

function startSonarqube() {
	if docker ps | grep -q sonarqube:${SonarqubeVersion}; then
		echo "     Sonarqube:${SonarqubeVersion} already running"
		return
	elif ! docker container ls -a | grep -q sonarqube:${SonarqubeVersion}; then
		nimbusapp sonarqube:${SonarqubeVersion} up
		echo "     Sonarqube:${SonarqubeVersion} started"
	else
		nimbusapp sonarqube:${SonarqubeVersion} start
		echo "     Sonarqube:${SonarqubeVersion} started"
	fi
}

function startSV() {
	if docker ps | grep -q sv:${SVVersion}; then
		echo "     SV:${SVVersion} already running"
		return
	elif ! docker container ls -a | grep -q sv:${SVVersion}; then
		nimbusapp sv:${SVVersion} up
		echo "     SV:${SVVersion} started"
	else
		nimbusapp sv:${SVVersion} start
		echo "     SV:${SVVersion} started"
	fi
}

function startUFTM() {
	if docker ps | grep -q uft-mobile:${UFTMVersion}; then
		echo "     UFT Mobile:${UFTMVersion} already running"
		return
	elif ! docker container ls -a | grep -q uft-mobile:${UFTMVersion}; then
		nimbusapp uft-mobile:${UFTMVersion} up
		echo "     UFT Mobile:${UFTMVersion} started"
	else
		nimbusapp uft-mobile:${UFTMVersion} start
		echo "     UFT Mobile:${UFTMVersion} started"
	fi
}
#All stop functions check whether the container is running.
#If the container is not running, a message indicating this is shown.
#If the container is running, the nimbusapp stop command is issued.

function stopALM() {
	if ! docker ps | grep -q alm:${ALMVersion}; then
		echo "     ALM:${ALMVersion} already stopped"
		return
	else
		nimbusapp alm:${ALMVersion} stop
		echo "     ALM:${ALMVersion} stopped"
	fi
}

function stopALMOctane() {
	if ! docker ps | grep -q octane:${ALMOctaneVersion}; then
		echo "     ALM Octane:${ALMOctaneVersion} already stopped"
		return
	else
		nimbusapp octane:${ALMOctaneVersion} stop
		echo "     ALM Octane:${ALMOctaneVersion} stopped"
	fi
}

function stopAOS() {
	if ! docker ps | grep -q aos-main-app:${AOSVersion}; then
		echo "     AOS:${AOSVersion} already stopped"
		return
	else
		nimbusapp aos:${AOSVersion} stop
		echo "     AOS:${AOSVersion} stopped"
	fi
}

function stopAOSQA() {
	if ! docker ps | grep -q aos-main-qa:${AOSQAVersion}; then
		echo "     AOS-QA:${AOSQAVersion} already stopped"
		return
	else
		nimbusapp aos-qa:${AOSQAVersion} stop
		echo "     AOS-QA:${AOSQAVersion} stopped"
	fi
}

function stopAutopass() {
	if ! docker ps | grep -q autopass:${AutopassVersion}; then
		echo "     Autopass:${AutopassVersion} already stopped"
		return
	else
		nimbusapp autopass:${AutopassVersion} stop
		echo "     Autopass:${AutopassVersion} stopped"
	fi
}
function stopDA() {
	if ! docker ps | grep -q da-server:${DAVersion}; then
		echo "     Deployment Automation:${DAVersion} already stopped"
		return
	else
		nimbusapp da:${DAVersion} stop
		echo "     Deployment Automation:${DAVersion} stopped"
	fi
}

function stopDevOps() {
	if ! docker ps | grep -q devops:${DevOpsVersion}; then
		echo "     DevOps:${DevOpsVersion} already stopped"
		return
	else
		nimbusapp devops:${DevOpsVersion} stop
		echo "     DevOps:${DevOpsVersion} stopped"
	fi
}

function stopFortify() {
	if ! docker ps | grep -q sca:${SCAVersion} && ! docker ps | grep -q ssc:${SSCVersion}; then
		echo "     Fortify:${SSCVersion} already stopped"
		return
	fi

	if docker ps | grep -q sca:${SCAVersion}; then
		nimbusapp sca:${SCAVersion} stop
	fi
	if docker ps | grep -q ssc:${SSCVersion}; then
		nimbusapp ssc:${SSCVersion} stop
		echo "     Fortify:${SSCVersion} stopped"
	fi
}

function stopIntelliJ() {
	if ! docker ps | grep -q intellij:${IntelliJVersion}; then
		echo "     IntelliJ:${IntelliJVersion} already stopped"
		return
	else
		nimbusapp intellij:${IntelliJVersion} stop
		echo "     IntelliJ:${IntelliJVersion} stopped"
	fi
}

function stopJIRA() {
	if ! docker ps | grep -q jira:${JIRAVersion}; then
		echo "     JIRA:${JIRAVersion} already stopped"
		return
	else
		nimbusapp jira:${JIRAVersion} stop
		echo "     JIRA:${JIRAVersion} stopped"
	fi
}

function stopLFTChrome() {
	if ! docker ps | grep -q leanft-chrome:${LFTChromeVersion}; then
		echo "     LeanFT-Chrome:${LFTChromeVersion} already stopped"
		return
	else
		nimbusapp leanft-chrome:${LFTChromeVersion} stop
		echo "     LeanFT-Chrome:${LFTChromeVersion} stopped"
	fi
}

function stopMFConnect() {
	if ! docker ps | grep -q mfconnect:${MFConnectVersion}; then
		echo "     MF Connect:${MFConnectVersion} already stopped"
		return
	else
		nimbusapp mfconnect:${MFConnectVersion} stop
		echo "     MF Connect:${MFConnectVersion} stopped"
	fi
}

function stopPPM() {
	if ! docker ps | grep -q ppm:${PPMVersion}; then
		echo "     Project and Portfolio Management:${PPMVersion} already stopped"
		return
	else
		nimbusapp ppm:${PPMVersion} stop
		echo "     Project and Portfolio Management:${PPMVersion} stopped"
	fi
}

function stopRPA() {
	if ! docker ps | grep -q rpa:${RPAVersion}; then
		echo "     Robotic Process Automation:${RPAVersion} already stopped"
		return
	else
		nimbusapp rpa:${RPAVersion} stop
		echo "     Robotic Process Automation:${RPAVersion} stopped"
	fi
}

function stopSonarqube() {
	if ! docker ps | grep -q sonarqube:${SonarqubeVersion}; then
		echo "     Sonarqube:${SonarqubeVersion} already stopped"
		return
	else
		nimbusapp sonarqube:${SonarqubeVersion} stop
		echo "     sonarqube:${SonarqubeVersion} stopped"
	fi
}

function stopSV() {
	if ! docker ps | grep -q sv:${SVVersion}; then
		echo "     SV:${SVVersion} already stopped"
		return
	else
		nimbusapp sv:${SVVersion} stop
		echo "     SV:${SVVersion} stopped"
	fi
}

function stopUFTM() {
	if ! docker ps | grep -q uft-mobile:${UFTMVersion}; then
		echo "     UFT Mobile:${UFTMVersion} already stopped"
		return
	else
		nimbusapp uft-mobile:${UFTMVersion} stop
		echo "     UFT Mobile:${UFTMVersion} stopped"
	fi
}

#All pull functions check for the existence of the relevant image.
#If the container is not found, the nimbusapp pull command is issued.
#If the container is found, a message indicating this is shown.

function pullALM() {
	if docker image ls -a | grep -q alm; then
		echo "     ALM:${ALMVersion} already exists"
		read -rp "     Would you like to pull it again? [yn] " repullALM
		if [ "$repullALM" == y ]; then
			nimbusapp alm:${ALMVersion} pull
		fi
	else
		nimbusapp alm:${ALMVersion} pull
		echo "     ALM:${ALMVersion} pulled"
	fi
}

function pullALMOctane() {
	if docker image ls -a | grep -q octane; then
		echo "     ALM Octane:${ALMOctaneVersion} already exists"
		read -rp "     Would you like to pull it again? [yn] " repullOctane
		if [ "$repullOctane" == y ]; then
			nimbusapp alm:${ALMVersion} pull
		fi
	else
		nimbusapp octane:${ALMOctaneVersion} pull
		echo "     ALM Octane:${ALMOctaneVersion} pulled"
	fi
}

function pullAOS() {
	if docker image ls -a | grep -q aos-main-app; then
		echo "     AOS:${AOSVersion} already exists"
		read -rp "     Would you like to pull it again? [yn] " repullAOS
		if [ "$repullAOS" == y ]; then
			nimbusapp aos:${AOSVersion} pull
		fi
	else
		nimbusapp aos:${AOSVersion} pull
		echo "     AOS:${AOSVersion} pulled"
	fi
}

function pullAOSQA() {
	if docker image ls -a | grep -q aos-main-app; then
		echo "     AOS-QA:${AOSQAVersion} already exists"
		read -rp "     Would you like to pull it again? [yn] " repullAOSQA
		if [ "$repullAOQAS" == y ]; then
			nimbusapp aos-qa:${AOSQAVersion} pull
		fi
	else
		nimbusapp aos-qa:${AOSQAVersion} pull
		echo "     AOS-QA:${AOSQAVersion} pulled"
	fi
}

function pullAutopass() {
	if docker image ls -a | grep -q autopass; then
		echo "     Autopass:${AutopassVersion} already exists"
		read -rp "     Would you like to pull it again? [yn] " repullAutopass
		if [ "$repullAutopass" == y ]; then
			nimbusapp autopass:${AutopassVersion} pull
		fi
	else
		nimbusapp autopass:${AutopassVersion} pull
		echo "     Autopass:${AutopassVersion} pulled"
	fi
}

function pullDA() {
	if docker image ls -a | grep -q da-server; then
		echo "     Deployment Automation:${DAVersion} already exists"
		read -rp "     Would you like to pull it again? [yn] " repullDA
		if [ "$repullDA" == y ]; then
			nimbusapp da:${DAVersion} pull
		fi
	else
		nimbusapp da:${DAVersion} pull
		echo "     Deployment Automation:${DAVersion} pulled"
	fi
}

function pullDevOps() {
	if docker image ls -a | grep -q devops; then
		echo "     DevOps:${DevOpsVersion} already exists"
		read -rp "     Would you like to pull it again? [yn] " repullDevOps
		if [ "$repullDevOps" == y ]; then
			nimbusapp devops:${DevOpsVersion} pull
		fi
	else
		nimbusapp devops:${DevOpsVersion} pull
		echo "     DevOps:${DevOpsVersion} pulled"
	fi
}

function pullFortify() {
	if docker image ls -a | grep -q sca && docker image ls -a | grep -q ssc; then
		echo "     Fortify:${SSCVersion} already exists"
		read -rp "     Would you like to pull it again? [yn] " repullFortify
		if [ "$repullFortify" == y ]; then
			nimbusapp sca:${SCAVersion} pull
			nimbusapp ssc:${SSCVersion} pull
		fi
	fi

	if ! docker image ls -a | grep -q sca; then
		nimbusapp sca:${SCAVersion} pull
		echo "     SCA:${SCAVersion} pulled"
	fi
	if ! docker image ls -a | grep -q ssc; then
		nimbusapp ssc:${SSCVersion} pull
		echo "     SSC:${SSCVersion} pulled"
	fi
}

function pullIntelliJ() {
	if docker image ls -a | grep -q intellij; then
		echo "     IntelliJ:${IntelliJVersion} already exists"
		read -rp "     Would you like to pull it again? [yn] " repullIntelliJ
		if [ "$repullIntelliJ" == y ]; then
			nimbusapp intellij:${IntelliJVersion} pull
		fi
	else
		nimbusapp intellij:${IntelliJVersion} pull
		echo "     IntelliJ:${IntelliJVersion} pulled"
	fi
}

function pullJIRA() {
	if docker image ls -a | grep -q jira; then
		echo "     JIRA:${JIRAVersion} already exists"
		read -rp "     Would you like to pull it again? [yn] " repullJIRA
		if [ "$repullJIRA" == y ]; then
			nimbusapp jira:${JIRAVersion} pull
		fi
	else
		nimbusapp jira:${JIRAVersion} pull
		echo "     JIRA:${JIRAVersion} pulled"
	fi
}

function pullLFTChrome() {
	if docker image ls -a | grep -q leanft-chrome; then
		echo "     LeanFT-Chrome:${LFTChromeVersion} already exists"
		read -rp "     Would you like to pull it again? [yn] " repullLFT
		if [ "$repullLFT" == y ]; then
			nimbusapp leanft-chrome:${LFTChromeVersion} pull
		fi
	else
		nimbusapp leanft-chrome:${LFTChromeVersion} pull
		echo "     LeanFT-Chrome:${LFTChromeVersion} pulled"
	fi
}

function pullMFConnect() {
	if docker image ls -a | grep -q mfconnect; then
		echo "     MF Connect:${MFConnectVersion} already exists"
		read -rp "     Would you like to pull it again? [yn] " repullMFConnect
		if [ "$repullMFConnect" == y ]; then
			nimbusapp mfconnect:${MFConnectVersion} pull
		fi
	else
		nimbusapp mfconnect:${MFConnectVersion} pull
		echo "     MF Connect:${MFConnectVersion} pulled"
	fi
}

function pullPPM() {
	if docker image ls -a | grep -q ppm; then
		echo "     PPM:${PPMVersion} already exists"
		read -rp "     Would you like to pull it again? [yn] " repullPPM
		if [ "$repullPPM" == y ]; then
			nimbusapp ppm:${PPMVersion} pull
		fi
	else
		nimbusapp ppm:${PPMVersion} pull
		echo "     PPM:${PPMVersion} pulled"
	fi
}

function pullRPA() {
	if docker image ls -a | grep -q rpa; then
		echo "     RPA:${RPAVersion} already exists"
		read -rp "     Would you like to pull it again? [yn] " repullRPA
		if [ "$repullRPA" == y ]; then
			nimbusapp rpa:${RPAVersion} pull
		fi
	else
		nimbusapp rpa:${RPAVersion} pull
		echo "     RPA:${RPAVersion} pulled"
	fi
}

function pullSonarqube() {
	if docker image ls -a | grep -q sonarqube; then
		echo "     Sonarqube:${SonarqubeVersion} already exists"
		read -rp "     Would you like to pull it again? [yn] " repullSonar
		if [ "$repullSonar" == y ]; then
			nimbusapp sonarqube:${SonarqubeVersion} pull
		fi
	else
		nimbusapp sonarqube:${SonarqubeVersion} pull
		echo "     sonarqube:${SonarqubeVersion} pulled"
	fi
}

function pullSV() {
	if docker image ls -a | grep -q sv; then
		echo "     SV:${SVVersion} already exists"
		read -rp "     Would you like to pull it again? [yn] " repullSV
		if [ "$repullSV" == y ]; then
			nimbusapp sv:${SVVersion} pull
		fi
	else
		nimbusapp sv:${SVVersion} pull
		echo "     SV:${SVVersion} pulled"
	fi
}

function pullUFTM() {
	if docker image ls -a | grep -q uft-mobile; then
		echo "     UFT Mobile:${UFTMVersion} already exists"
		read -rp "     Would you like to pull it again? [yn] " repullUFTM
		if [ "$repullUFTM" == y ]; then
			nimbusapp uft-mobile:${UFTMVersion} pull
		fi
	else
		nimbusapp uft-mobile:${UFTMVersion} pull
		echo "     UFT Mobile:${UFTMVersion} pulled"
	fi
}

#
#
#
function restartALM() {
	if docker ps | grep -q alm:${ALMVersion}; then
		nimbusapp alm:${ALMVersion} restart
		echo "     ALM:${ALMVersion} restarted."
	else
		echo "     ALM:${ALMVersion} not running, no need to restart"
		return
	fi
}

function restartALMOctane() {
	if docker ps | grep -q octane:${ALMOctaneVersion}; then
		nimbusapp octane:${ALMOctaneVersion} restart
		echo "     Octane:${ALMOctaneVersion} restarted."
	else
		echo "     Octane:${ALMOctaneVersion} not running, no need to restart"
		return
	fi
}

function restartAOS() {
	if docker ps | grep -q aos; then
		nimbusapp aos:${AOSVersion} restart
		echo "     AOS:${AOSVersion} restarted."
	else
		echo "     AOS:${AOSVersion} not running, no need to restart"
		return
	fi
}

function restartAOSQA() {
	if docker ps | grep -q aos-main-qa:${AOSQAVersion}; then
		nimbusapp aos-qa:${AOSQAVersion} restart
		echo "     AOS-QA:${AOSQAVersion} restarted."
	else
		echo "     AOS-QA:${AOSQAVersion} not running, no need to restart"
		return
	fi
}

function restartAutopass() {
	if docker ps | grep -q autopass:${AutopassVersion}; then
		nimbusapp autopass:${AutopassVersion} restart
		echo "     Autopass:${AutopassVersion} restarted."
	else
		echo "     Autopass:${AutopassVersion} not running, no need to restart"
		return
	fi
}

function restartDA() {
	if docker ps | grep -q da-server:${DAVersion}; then
		nimbusapp da:${DAVersion} restart
		echo "     Deployment Automation:${DAVersion} restarted."
	else
		echo "     Deployment Automation:${DAVersion} not running, no need to restart"
		return
	fi
}

function restartDevOps() {
	if docker ps | grep -q devops; then
		nimbusapp devops:${DevOpsVersion} restart
		echo "     DevOps:${DevOpsVersion} restarted."
	else
		echo "     DevOps:${DevOpsVersion} not running, no need to restart"
		return
	fi
}

function restartFortify() {
	if docker ps | grep -q sca:${SCAVersion}; then
		nimbusapp sca:${SCAVersion} restart
		echo "     SCAsca:${SCAVersion} restarted."
	else
		echo "     SCAsca:${SCAVersion} not running, no need to restart"
		return
	fi
	if docker ps | grep -q ssc:${SSCVersion}; then
		nimbusapp ssc:${SSCVersion} restart
		echo "     SSC:${SSCVersion} restarted."
	else
		echo "     SSC:${SSCVersion} not running, no need to restart"
		return
	fi
}

function restartIntelliJ() {
	if docker ps | grep -q intellij:${IntelliJVersion}; then
		nimbusapp intellij:${IntelliJVersion} restart
		echo "     IntelliJ:${IntelliJVersion} restarted."
	else
		echo "     IntelliJ:${IntelliJVersion} not running, no need to restart"
		return
	fi
}

function restartJIRA() {
	if docker ps | grep -q jira:${JIRAVersion}; then
		nimbusapp jira:${JIRAVersion} restart
		echo "     JIRA:${JIRAVersion} restarted."
	else
		echo "     JIRA:${JIRAVersion} not running, no need to restart"
		return
	fi
}

function restartLFTChrome() {
	if docker ps | grep -q leanft-chrome:${LFTChromeVersion}; then
		nimbusapp leanft-chrome:${LFTChromeVersion} restart
		echo "     LeanFT-Chrome:${LFTChromeVersion} restarted."
	else
		echo "     LeanFT-Chrome:${LFTChromeVersion} not running, no need to restart"
		return
	fi
}

function restartMFConnect() {
	if docker ps | grep -q mfconnect:${MFConnectVersion}; then
		nimbusapp mfconnect:${MFConnectVersion} restart
		echo "     MF Connect:${MFConnectVersion} restarted."
	else
		echo "     MF Connect:${MFConnectVersion} not running, no need to restart"
		return
	fi
}

function restartPPM() {
	if docker ps | grep -q ppm:${PPMVersion}; then
		nimbusapp ppm:${PPMVersion} restart
		echo "     PPM:${PPMVersion} already restarted"
		return
	else
		echo "     PPM:${PPMVersion} not running, no need to restart"
		return
	fi
}

function restartRPA() {
	if docker ps | grep -q rpa:${RPAVersion}; then
		nimbusapp rpa:${RPAVersion} restart
		echo "     RPA:${RPAVersion} already restarted"
		return
	else
		echo "     RPA:${RPAVersion} not running, no need to restart"
		return
	fi
}

function restartSonarqube() {
	if docker ps | grep -q sonarqube:${SonarqubeVersion}; then
		nimbusapp sonarqube:${SonarqubeVersion} restart
		echo "     Sonarqube:${SonarqubeVersion} restarted"
		return
	else
		echo "     Sonarqube:${SonarqubeVersion} not running, no need to restart"
		return
	fi
}

function restartSV() {
	if docker ps | grep -q sv:${SVVersion}; then
		nimbusapp sv:${SVVersion} restart
		echo "     SV:${SVVersion} restarted"
	else
		echo "     SV:${SVVersion} not running, no need to restart"
		return
	fi
}

function restartUFTM() {
	if docker ps | grep -q uft-mobile:${UFTMVersion}; then
		nimbusapp uft-mobile:${UFTMVersion} restart
		echo "     UFT Mobile:${UFTMVersion} restarted"
	else
		echo "     UFT Mobile:${UFTMVersion} not running, no need to restart"
		return
	fi
}